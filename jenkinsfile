pipeline {
    agent any

    environment {
        DOCKER_HUB_REPO = 'nagham94' 
        GIT_REPO_URL = 'https://github.com/Nagham94/DEPI-FINAL-PROJECT.git'  
        BRANCH_NAME = "final-nagham"
        TECHNOLOGY_NAME = "solar-app-backend"
    }

    stages {
        stage('Checkout Application Repository') {
            steps {
                script {
                    deleteDir()  // Clears workspace before checking out repo
                    git branch: BRANCH_NAME, credentialsId: 'github_token', url: GIT_REPO_URL
                    echo "Repository checkout successful"
                    env.IMAGE_NAME = "${DOCKER_HUB_REPO}/${TECHNOLOGY_NAME}:latest"
                    sh "echo Global Image Name: ${env.IMAGE_NAME}"
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    sh """
                        docker build -t ${env.IMAGE_NAME} ./app
                        echo "Built Docker image: ${env.IMAGE_NAME}"
                    """
                }
            }
        }

        stage('Login to Docker Hub') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: 'dockerhub', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                        sh 'echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin'
                    }
                }
            }
        }

        stage('Push Docker Images to Docker Hub') {
            steps {
                script {
                        sh """
                           docker push ${env.IMAGE_NAME}
                           echo "Image pushed successfully: ${env.IMAGE_NAME}"
                        """
                }
            }
        }

        stage('Terraform') {
            options {
              retry(2) // retry this stage up to 2 more times if it fails
            }
            steps {
                 withCredentials([usernamePassword(
                    credentialsId: 'aws-credentials', 
                    usernameVariable: 'AWS_ACCESS_KEY_ID',
                    passwordVariable: 'AWS_SECRET_ACCESS_KEY'
                )]) {
                        sh """
                           terraform init -reconfigure
                           terraform apply -auto-approve
                        """
                }
            }
        }

    }

    post {
      always {
       script {
         echo "Cleaning up Docker images to free disk space..."
         // Remove the image built in this pipeline
         sh "docker rmi -f ${env.IMAGE_NAME} || true"
         // Remove dangling images
         sh "docker image prune -f"

         // Get build status
         def status = currentBuild.currentResult

         // Initialize IPs
         def masterIp = "N/A"
         def workerIp = "N/A"
         def prometheusIp = "N/A"

         // Get Terraform output
         try {
          withCredentials([usernamePassword(
                    credentialsId: 'aws-credentials', 
                    usernameVariable: 'AWS_ACCESS_KEY_ID',
                    passwordVariable: 'AWS_SECRET_ACCESS_KEY'
                )]) {
           def tfOutput = sh(script: 'terraform output -json', returnStdout: true).trim()
           def json = readJSON text: tfOutput
           masterIp = json.master_server_public_ip.value
           workerIp = json.worker_server_public_ip.value
           prometheusIp = json.prometheus_server_public_ip.value
         }} catch (err) {
         echo "Terraform output fetch failed: ${err.getMessage()}"
         }

         // Slack notification
         def color = (status == 'SUCCESS') ? 'good' : 'danger'

         slackSend (
          color: color,
          message: """ 
          *Build Status:* ${status}
          *App URL:* http://${workerIp}:30004
          *Prometheus URL:* http://${prometheusIp}:30090
          *Master IP:* ${masterIp}
          *Worker IP:* ${workerIp}
          *Prometheus IP:* ${prometheusIp}
          """
      )
    }
  }
}

}
